<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="300" name="SPEED"/>
<constant value="0" name="STOPPED"/>
<constant value="1" name="FORWARD"/>
<constant value="2" name="BLOCK"/>
<constant value="4" name="HOME"/>
<constant value="300" name="gTHRESHOLD"/>
<constant value="3000" name="wTHRESHOLD"/>
<constant value="400" name="lineTHRESHOLD"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">var state = STOPPED
var myColour[3] = [2, 2, 2] #Array of values for first scan
var scanResult[3] = [2, 2, 2] #Last scan's results
var foundColour = 0 #Turns 1 if found

#LED Colours
var LED[12] = [
	[32, 0, 0], #RED
	[0, 128, 0], #GREEN
	[0, 0, 32], #BLUE
	[32, 32, 32] #WHITE
]

var LEDCodes[12] = [
	[0, 1, 0], #RED
	[1, 1, 0], #GREEN
	[1, 0, 1], #BLUE
	[0, 0, 1] #WHITE
] 

#Location Key Quad
var locations[32] = [
	0, 1, 0, 0,
	1, 0, 0, 0,
	0, 0, 0, 1,
	0, 0, 1, 1,
	0, 1, 1, 0,
	1, 1, 0, 0,
	1, 0, 0, 1,
	0, 0, 1, 0
]

var locateDisplay[64] = [
	32, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 32
]

var currLoc[4] = [2, 2, 2, 2] #2 is a placeholder null value.
var i = 0 #For ground scanning
var w = 0 #For wall scanning
var a = 0 #Value for LED lights
var squareLoop = 0 #The overall loop for the search and rescue.
var SQUARE = 6 #For correct LED scan without location found.
var currQUAD = 10 #Current square in case of more wScans

onevent button.backward
	state = STOPPED
	motor.left.target = 0
	motor.right.target = 0
	
onevent button.right
	if myColour[0] == 2 then
		callsub wScan
		myColour = scanResult
		
		callsub colourLocal
		
		call leds.top(LED[3*a], LED[3*a + 1], LED[3*a + 2]) #Displays the colour
	end
	
onevent button.left
	#Button for debugging
	#Resets all values.
	
	call leds.top(0, 0, 0) #Resets the colour display
	a = 0 #Resets the a value.
	state = STOPPED

onevent button.forward
	if state != HOME and state != STOPPED then
		call leds.top(0, 0, 0) #Resets the colour display
		a = 0 #Resets the a value.
		
		for squareLoop in 0:3 do
			callsub localize		
			callsub turn90
		
			motor.left.target = SPEED
			motor.right.target = SPEED
			state = FORWARD
	
			#Prox event that makes current loop state end for the next cycle.
		end
	
		while foundColour &lt; 1 do
			callsub wScan
		
			if currQUAD == 7 then
				currQUAD = 0
			else 
				currQUAD++
			end
		
			callsub colourFind
		
			if  foundColour == 0 then
				callsub turn90
				motor.left.target = SPEED
				motor.right.target = SPEED
				state = FORWARD
		
				#Prox event for next cycle.
			end
		end
	
		callsub returnHome
	end
	
sub localize
	if currLoc[3] == 2 then
		if gTHRESHOLD > prox.ground.delta[0] then
			currLoc[i] = 1
		else
			currLoc[i] = 0
		end
	
		i++
	end
	
	callsub wScan
	
	if  currLoc[3] &lt; 2 then
		#I'm so sorry for what I'm about to do
		#Enjoy my spaghetti code.
		if  currLoc[0] == 0 then
			if currLoc[1] == 1 then
				if  currLoc[2] == 1 then
					currQUAD = 4
				else
					currQUAD = 0
				end
			else
				if  currLoc[2] == 1 then
					if  currLoc[3] == 1 then
						currQUAD = 3
					else 
						currQUAD = 7
					end
				else
					currQUAD = 2
				end
			end
		else
			if  currLoc[1] == 1 then
				currQUAD = 5
			else
				if currLoc[3] == 1 then
					currQUAD = 6
				else
					currQUAD = 1
				end
			end			
		end
	end

sub wScan
	if wTHRESHOLD > prox.horizontal[1] then
		scanResult[0] = 1
	else
		scanResult[0] = 0
	end
	
	if wTHRESHOLD > prox.horizontal[2] then
		scanResult[1] = 1
	else
		scanResult[1] = 0
	end
	
	if wTHRESHOLD > prox.horizontal[3] then
		scanResult[2] = 1
	else
		scanResult[2] = 0
	end

sub returnHome
	state = HOME
	
	motor.left.target = -SPEED
	motor.right.target = SPEED
	
	if currQUAD % 2 == 0 then
		timer.period[1] = 917
	else
		timer.period[1] = 1222
	end
	
onevent timer1
	timer.period[1] = 0
	if state == HOME then
		timer.period[0] = 3000 #Stops after 3 seconds and flashes results
		motor.left.target = SPEED
		motor.right.target = SPEED
	end	
	
sub turn90
	motor.left.target = SPEED
	motor.right.target = -SPEED
	timer.period[0] = 611
	
sub colourFind
	if myColour[0] == scanResult[0] then
		if myColour[1] == scanResult[1] then
			if  myColour[2] == scanResult[2] then
				SQUARE = currQUAD
				foundColour = 1
			end
		end
	end
	
sub colourLocal
	if scanResult[0] == 0 then
		if  scanResult[1] == 0 then
			a = 3
		else
			a = 0
		end
	else
		if scanResult[1] == 0 then
			a = 2
		else
			a = 1
		end
	end
	
onevent timer0
	timer.period[0] = 0
	if  state == HOME then
		motor.left.target = 0
		motor.right.target = 0
		
		callsub colourLocal
		
		#Displays
		call leds.top(LED[3*a], LED[3*a + 1], LED[3*a + 2]) #Displays the colour
		call leds.circle(locateDisplay[(8*SQUARE)], locateDisplay[(8*SQUARE) + 1], locateDisplay[(8*SQUARE) + 2], locateDisplay[(8*SQUARE) + 3], locateDisplay[8*SQUARE + 4], locateDisplay[(8*SQUARE) + 5], locateDisplay[(8*SQUARE) + 6], locateDisplay[(8*SQUARE) + 7])
	else
		state = FORWARD
		motor.left.target = SPEED
		motor.right.target = SPEED
	end
	
onevent prox	
	if lineTHRESHOLD > prox.horizontal[3] and state == FORWARD then
		squareLoop++
	end</node>


</network>
