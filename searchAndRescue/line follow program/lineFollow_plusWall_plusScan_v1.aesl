<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="0" name="STOPPED"/>
<constant value="1" name="LEFT"/>
<constant value="300" name="THRESHOLD"/>
<constant value="2" name="RIGHT"/>
<constant value="200" name="TARGET"/>
<constant value="2000" name="wallTHRESH"/>
<constant value="3" name="SCAN"/>
<constant value="4" name="READY"/>
<constant value="4000" name="wTHRESHOLD"/>
<constant value="5" name="gSCAN"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">#LED Colours
var LED[12] = [
	[32, 0, 0], #RED
	[0, 128, 0], #GREEN
	[0, 0, 32], #BLUE
	[32, 32, 32] #WHITE
]

var LEDCodes[12] = [
	[0, 1, 0], #RED
	[1, 1, 0], #GREEN
	[1, 0, 1], #BLUE
	[0, 0, 1] #WHITE
] 

#Location LEDS
var locateDisplay[64] = [
	32, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0,
	0, 0, 0, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 0, 32
]

var myColour[3] = [2, 2, 2] #First scan. The colour we look for.
var scanResult[3] = [2, 2, 2] #Current wall scan
var currLoc[4] = [2, 2, 2, 2] #Current location scan
var a = 0 #Value for LED lights
var SQUARE = 6 #For correct LED scan without location found.
var currQUAD = -4 #Current square the robot is in.
var i = 0 #Value for number of squares scanned on the ground

var state = STOPPED # variable declarations
motor.left.target = 0 # reset motors
motor.right.target = 0

onevent button.forward # on forward button press
state = LEFT # transition to LEFT state
motor.left.target = TARGET
motor.right.target = TARGET

call leds.top(0, 0, 0) #Resets the colour display
a = 0 #Resets the a value.

onevent button.backward # on backward button press
state = STOPPED # transition to STOPPED state
motor.left.target = 0 # stop motors
motor.right.target = 0

onevent button.right
	if myColour[0] == 2 then
		callsub wScan
		myColour = scanResult
		
		callsub colourLocal
		
		call leds.top(LED[3*a], LED[3*a + 1], LED[3*a + 2]) #Displays the colour
		
		state = READY
	end

onevent prox # on prox event
	if state != STOPPED then # if robot is moving
		
		# if moving left and not sensing black line
		if state == LEFT and prox.ground.delta[0] >= THRESHOLD then
			state = RIGHT # transition to RIGHT state
			motor.left.target = TARGET # move right
			motor.right.target = 120
		end
		
		# if moving right and sensing black line
		if state == RIGHT and prox.ground.delta[0] &lt; THRESHOLD then
			state = LEFT # transition to LEFT state
			motor.left.target = 120 # move left
			motor.right.target = TARGET
		end
		
		#Wall detection
		if  prox.horizontal[0] > wallTHRESH or prox.horizontal[4] > wallTHRESH then
			state = SCAN
			motor.left.target = 0
			motor.right.target = 0
		end
	end
	
	if state == SCAN then
		if prox.horizontal[0] > 0 or prox.horizontal[4] > 0  then
			motor.left.target = -100
			motor.right.target = -100
		else
			motor.left.target = 0
			motor.right.target = 0
			
			callsub wScan
			callsub colourLocal
			
			state = gSCAN
		end
	end
	
	if  state == gSCAN and prox.horizontal[0] == 0 and i != 4 then
		timer.period[0] = 1000
		
		motor.left.target = TARGET
		motor.left.target = -TARGET
	end

sub wScan
	if wTHRESHOLD > prox.horizontal[1] then
		scanResult[0] = 1
	else
		scanResult[0] = 0
	end
	
	if wTHRESHOLD > prox.horizontal[2] then
		scanResult[1] = 1
	else
		scanResult[1] = 0
	end
	
	if wTHRESHOLD > prox.horizontal[3] then
		scanResult[2] = 1
	else
		scanResult[2] = 0
	end
	
sub colourLocal
	if scanResult[0] == 0 then
		if  scanResult[1] == 0 then
			a = 3
		else
			a = 0
		end
	else
		if scanResult[1] == 0 then
			a = 2
		else
			a = 1
		end
	end
	
onevent timer0
	if state == gSCAN then
		motor.left.target = 0
		motor.right.target = 0
		
		currLoc[i] = prox.ground.delta[1]
		
		i++
	end</node>


</network>
