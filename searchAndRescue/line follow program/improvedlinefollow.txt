var max
var min
var mean
var state
var count
var timer
var linefollow
var wait
motor.left.target=0
motor.right.target=0
timer.period[0]=0
count = 0
wait =0

onevent button.forward
	timer = 0
	count = 0
	linefollow = 1
	state=left
	motor.left.target = target
	motor.right.target = target
	wait = 0
	
onevent button.backward
	state=stopped
	motor.left.target=0
	motor.right.target=0

onevent prox
	if state != stopped and linefollow == 1 then 
			if (state == left) and  (prox.ground.delta[0] <= colour) and wait == 0 then
				wait = 1
			if  state == left and prox.ground.delta[0] <= colour and wait == 1 then
				state = right
				motor.left.target = target - slow
				motor.right.target = target 
				wait = 0	
			end
			end
			if (state == right) and  (prox.ground.delta[1] <= colour) and wait == 0 then
				wait = 1
			if  state == right and prox.ground.delta[1] <= colour and wait == 1 then
				state = left
				motor.left.target = target 
				motor.right.target = target - slow
				wait = 0
				end
			end
		end
	call math.stat( prox.horizontal[1:3], min, max, mean)
	if (max>threshold) and min != 0  and state != stopped then
			count = 1
			callsub goAround		
	else
	end	
sub goAround
	linefollow = 0
	if count==1 then
		timer.period[0]=619
		timer = 1
		motor.left.target=target
		motor.right.target=-target
	end	
	if count==2 then
		timer.period[0]=800
		timer = 1
		motor.left.target = target
		motor.right.target = target
	end
	if count==3 then
		timer.period[0]=1200
		timer = 1
		motor.left.target=0
		motor.right.target=target
	end
	if count==4 then
		timer.period[0]=1300
		timer = 1
		motor.left.target = target
		motor.right.target = target
	end
	if count==5 then
		timer.period[0]=619
		timer = 1
		motor.left.target=-target
		motor.right.target=target
	end
	if count==6 then
		motor.left.target = target
		motor.right.target = target
		state = left
		linefollow = 1
	end
onevent timer0
	if  timer == 1 and state != stopped then
		count=count+1
		motor.left.target = 0
		motor.right.target = 0
		timer = 0
		callsub goAround
	end	

